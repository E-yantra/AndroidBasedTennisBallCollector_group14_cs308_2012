Intended for firstime users of github
Note: A few instructions may be specific to our current project 

Sources: 
(various help pages on internet)
A few note worthy ones are
 * help.github.com
 * http://cheat.errtheblog.com/s/git
 * http://help.github.com/git-cheat-sheets/
 * http://byte.kde.org/~zrusin/git/git-cheat-sheet-medium.png
 * http://book.git-scm.com

/******************************************************************************/
ONE TIME ONLY

*** Setting Up the Git Repo
All the instructions are from http://help.github.com/linux-set-up-git/
(I am just listing them for consistency.)
    - Install git-core from synaptic
    > cd ~/.ssh
    > ls
    > mkdir key_backup
    > cp id_rsa* key_backup
    > rm id_rsa*
    > ssh-keygen -t rsa -C "your_email@youremail.com"
    (press <enter> if you are prompted for any thing)
    Now add the key generated in id_rsa.pub to your github.com account as shown in above link.

    Now continue to setting up your info
    > git config --global user.name "Firstname Lastname"
	> git config --global user.email "your_email@youremail.com"
    Take your github token from instructions
    > git config --global github.user githubusername
	> git config --global github.token 0123456789yourf0123456789token

Now you are done with setting up your laptop with Github


*** Setting up Code Base in your Laptop
    > mkdir CS308
    > cd CS308/
    > mkdir AndroidBasedTennisBallCollector
    > cd AndroidBasedTennisBallCollector/
    > git init
    > git remote add origin git@github.com:mintuhouse/AndroidBasedTennisBallCollector_group14_cs308_2012.git
    > git pull origin master
    > git checkout -b development
    > git pull origin development
    > ls
    You should now be able to see all the files 

*** Now checkout a new branch for every new major feature you are adding
    say like android application (say android_app here), video code
    > git checkout -b android_app
    ....
    ....
    Make all your changes
    > git add .
    > git commit -m "<message>"
    > git push origin android_app



/******************************************************************************/
EVERYTIME YOU START CODING
Check your mail whether anyone made any changes

Enter the project directory
    > cd ~/CS308/AndroidBasedTennisBallCollector_group14_cs308_2012
Pull the git repo from github
    > git status
    You should get clean repo
    > git branch
    Check whether you are on correct branch (here android_app)
    Otherwise
    > git checkout android_app
    Get updated code from repo (useful if two of us are working on same branch)
    > git pull origin android_app
    You may get some conficts, try to resolve them, if you are having some 
trouble, take help from the group 



/******************************************************************************/
EVERYTIME YOU MAKE ANY CHANGES

Check the status
    > git status
If you have any uncommited changes
    > git add .
    > git commit -m "<Changes made>"





/******************************************************************************/
EVERY TIME YOU EXIT FROM THE PROJECT DIRECTORY

Check the status
    > git status
If you have any uncommited changes
    > git add .
    > git commit -m "<Changes made>"
Save your changes to remote host
    > git push -u origin master
Leave the directory
    > cd ..

Send a mail on our thread describing the changes you made 


/******************************************************************************/
AFTER ADDING A NEW FEATURE COMPLETELY
    
Merge your changes once you feel that your code is completely functional.
    > git checkout development
    > git pull origin development 
    > git merge android_app
    At this stage you may encounter a lot of merge conflicts, which you may have to resolve.
    So, I strongly recommend doing this step only during the whole team meet
    
/******************************************************************************/


GENERAL TIPS & USAGE

* For adding forgotten changes to last commit

    > git add .
  or you can also just add that particular file by
    > git add <filename>
  Commit the changes to last commit
    > git commit --amend

* Create a new branch
    > git checkout -b <branch_name>

* Switch to a particular branch
 Note: You must avoid making changes to master without review 
    So avoid switching to master.



/******************************************************************************/
